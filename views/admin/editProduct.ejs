<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Edit Product</title>
  <link rel="stylesheet" href="/stylesheets/admin/editProduct.css" />


  <style>
    #existingImagesPreview img,
    #newImagesPreview img {
      width: 60px;
      height: 60px;
      margin-right: 5px;
    }


    .image-preview img {

      width: 50px;
      height: 50px;
    }

    .deselect-btn {
      background-color: red;
      color: white;
      border: none;
      padding: 5px 10px;

    }

    #imagePreview img {
      height: 60px;
      max-width: 90px;
      margin: 15px;
    }
  </style>
</head>

<body>
  <div class="title">
    <h2>Edit Product Form</h2>
  </div>
  <div class="main">
    <form action="/admin/editproduct/<%= items._id %>" method="post" enctype="multipart/form-data"
      onsubmit="return validateForm()">
      <div class="mb-3">
        <label for="productName">Product Name:</label>
        <input type="text" id="editProductName" name="name" value="<%= items.name %>">
        <small class="text-danger" style="color:red" id="editProductNameError"></small>
        <!-- Error message for product name -->
      </div>
      <div class="mb-3">
        <label for="Category">Category:</label>
        <select id="editCategory" name="category">
          <% category.forEach((cat)=> { %>
            <option <%=cat.categoryName===items.category ? 'selected' : '' %>><%= cat.categoryName %>
            </option>
            <% }); %>
        </select>
        <small class="text-danger" style="color:red" id="editCategoryError"></small> <!-- Error message for category -->
      </div>

      <div class="PrImageUplode">
        <label for="productImage" id="productImagesLabel">Product Images:</label>
        <input type="file" id="productImage" name="productImage" accept="image/*" multiple onchange="previewImages()">
        <div class="image-preview">
          <label id="PreviewOfImage">Image Preview:</label>
          <!-- Display existing images -->
          <% items.productImage.forEach((imageUrl, index)=> { %>
            <div class="preview-item" style="display: flex;">
              <img src="<%= imageUrl %>" alt="Product Image" />
              <small class="text-danger" style="color:red" id="editImageError"></small>
            </div>
            <% }); %>

        </div>
      </div>



      <div class="mb-3">
        <label for="description">Description:</label>
        <textarea id="editDescription" name="description"><%= items.description %></textarea>
        <small class="text-danger" style="color:red" id="editDescriptionError"></small>
        <!-- Error message for description -->
      </div>

      <div class="mb-3">
        <label for="price">Price:</label>
        <input type="number" id="editPrice" name="price" value="<%= items.price %>">
        <small class="text-danger" style="color:red" id="editPriceError"></small> <!-- Error message for price -->
      </div>

      <div class="mb-3">
        <label for="discount">Discount%:</label>
        <input type="number" id="editDiscount" name="discount" value="<%= items.discount %>">
        <small class="text-danger" style="color:red" id="editDiscountError"></small> <!-- Error message for discount -->
      </div>

      <div class="mb-3">
        <label for="stock">Stock:</label>
        <input type="number" id="editStock" name="stock" step="1" value="<%= items.stock %>">
        <small class="text-danger" style="color:red" id="editStockError"></small> <!-- Error message for stock -->
      </div>


      <div>
        <button type="submit">Submit</button>
        <button type="button" onclick="cancelForm()">Cancel</button>
      </div>
    </form>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


  <!--JS-->

  <script>
    function previewImages() {
      var input = document.getElementById('productImage');
      var previewContainer = document.querySelector('.image-preview');


       // Clear preview container
    previewContainer.innerHTML = '';

      // Array to store only the selected files
      var filesToUpload = [];

      // Process existing images
  //  // Process existing images
  //  <% items.productImage.forEach((imageUrl, index) => { %>
  //     var existingImgContainer = document.createElement('div');
  //     existingImgContainer.classList.add('preview-item');
  //     var existingImg = document.createElement('img');
  //     existingImg.src = '<%= imageUrl %>';
  //     existingImg.alt = 'Existing Image';
  //     existingImgContainer.appendChild(existingImg);
  //     previewContainer.appendChild(existingImgContainer);
  //   <% }); %>

      // Process newly uploaded images
      for (var i = 0; i < input.files.length; i++) {
        (function (file) {
          var reader = new FileReader();

          reader.onload = function (e) {
            var imgContainer = document.createElement('div');
            imgContainer.classList.add('preview-item');

            var img = document.createElement('img');
            img.src = e.target.result;
            img.alt = 'Selected Image';
            imgContainer.appendChild(img);

            // Check if the image is from existing images or newly uploaded ones
            if (!file.dataset) { // If dataset doesn't exist, it's a newly uploaded image
              var deselectBtn = document.createElement('button');
              deselectBtn.innerHTML = 'Deselect';
              deselectBtn.classList.add('deselect-btn');
              deselectBtn.addEventListener('click', function () {
                imgContainer.remove();
                // Remove the deselected file from the array of files
                var index = filesToUpload.indexOf(file);
                if (index !== -1) {
                  filesToUpload.splice(index, 1);
                }
              });

              imgContainer.appendChild(deselectBtn);

              // Add the file to the array of files to upload
              filesToUpload.push(file);
            }

            previewContainer.appendChild(imgContainer);
          };

          reader.readAsDataURL(file);
        })(input.files[i]);



      }


    }
 
 
 </script>







  <script>
    function validateForm() {
      let isValid = true; // Track overall form validity

      // Product Name validation
      const editProductNameInput = document.getElementById('editProductName');
      const editProductNameError = document.getElementById('editProductNameError');
      if (editProductNameInput.value.trim() === '') {
        editProductNameError.innerText = 'Product Name is required';
        isValid = false;
      } else {
        editProductNameError.innerText = ''; // Clear any previous error message
      }

      // Category validation
      const editCategoryInput = document.getElementById('editCategory');
      const editCategoryError = document.getElementById('editCategoryError');
      if (editCategoryInput.value.trim() === '') {
        editCategoryError.innerText = 'Category is required';
        isValid = false;
      } else {
        editCategoryError.innerText = ''; // Clear any previous error message
      }

      // Description validation
      const editDescriptionInput = document.getElementById('editDescription');
      const editDescriptionError = document.getElementById('editDescriptionError');
      if (editDescriptionInput.value.trim() === '') {
        editDescriptionError.innerText = 'Description is required';
        isValid = false;
      } else {
        editDescriptionError.innerText = ''; // Clear any previous error message
      }

      // Price validation
      const editPriceInput = document.getElementById('editPrice');
      const editPriceError = document.getElementById('editPriceError');
      if (isNaN(editPriceInput.value) || editPriceInput.value.trim() === '' || parseFloat(editPriceInput.value) < 0) {
        editPriceError.innerText = 'Price should be a non-negative number';
        isValid = false;
      } else {
        editPriceError.innerText = ''; // Clear any previous error message
      }

      // Discount% validation
      const editOfferpriceInput = document.getElementById('editDiscount');
      const editDiscountError = document.getElementById('editDiscountError');

      const productPrice = parseFloat(document.getElementById('editPrice').value);

      if (isNaN(editOfferpriceInput.value) || editOfferpriceInput.value.trim() === '') {
        editDiscountError.innerText = 'Discount percent is required';
        isValid = false;
      }
      else if (parseFloat(editOfferpriceInput.value) < 0) {
        editDiscountError.innerText = 'Discount percent should be a non-negative number';
        isValid = false;
      } else if (parseFloat(editOfferpriceInput.value) > 50) {
        editDiscountError.innerText = 'Discount percent cannot be greater than 50';
        isValid = false;
      } else {
        editDiscountError.innerText = ''; // Clear any previous error message
      }


      // Stock validation
      const editStockInput = document.getElementById('editStock');
      const editStockError = document.getElementById('editStockError');
      if (isNaN(editStockInput.value) || editStockInput.value.trim() === '' || parseInt(editStockInput.value) < 0) {
        editStockError.innerText = 'Stock should be a non-negative integer';
        isValid = false;
      } else {
        editStockError.innerText = ''; // Clear any previous error message
      }


      // Product Image validation
      // const productImageInput = document.getElementById('productImage');
      // const editImageError = document.getElementById('editImageError');
      // if (productImageInput.files.length === 0) {
      //   editImageError.innerText = 'Please upload at least one image';
      //   isValid = false;
      // } else {
      //   editImageError.innerText = ''; // Clear any previous error message
      // }


      return isValid; // Return overall form validity
    }
  </script>


  <!-- <script>
  // Function to add delete buttons for uploaded images
  function addDeleteButtons() {
    let previewDiv = document.getElementById("imagePreview");
    let previewImages = previewDiv.querySelectorAll("img");
    previewImages.forEach((image) => {
      if (
        !image.nextElementSibling ||
        !image.nextElementSibling.classList.contains("deleteButton")
      ) {
        let deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        deleteButton.classList.add("deleteButton");
        deleteButton.addEventListener("click", deleteImage);
        image.parentNode.insertBefore(deleteButton, image.nextSibling);
      }
    });
  }

  // Event listener for delete buttons
  function deleteImage(event) {
    let deleteButton = event.target;
    let image = deleteButton.previousElementSibling;
    let fileName = image.dataset.fileName;
    let inputId = image.dataset.input;
    let fileUploader = document.getElementById(inputId);
    let dt = new DataTransfer();
    for (let file of fileUploader.files) {
      if (file.name !== fileName) {
        dt.items.add(file);
      }
    }
    fileUploader.files = dt.files;
    let previewDiv = document.querySelector(
      fileUploader.dataset.imagePreview
    );
    previewDiv.removeChild(deleteButton); // Remove delete button
    previewDiv.removeChild(image); // Remove image
  }

 
 // Add event listener for file input change to add delete buttons
document
  .getElementById("fileUploader")
  .addEventListener("change", (event) => {
    let fileInput = event.target;
    let previewDiv = document.querySelector(
      fileInput.dataset.imagePreview
    );
    previewDiv.innerHTML = "";
    for (let each of fileInput.files) {
      let imgSrc = URL.createObjectURL(each);
      let img = document.createElement("img");
      img.src = imgSrc;
      img.dataset.fileName = each.name;
      img.dataset.input = fileInput.id;
      img.addEventListener("click", cropImage);
      previewDiv.appendChild(img);
    }
    addDeleteButtons(); // Add delete buttons for uploaded images
  });



</script> -->


  <script>
    function cancelForm() {
      // Add logic to handle cancel action
      alert("Form canceled");
    }

  </script>



  <!-- ... Rest of your HTML code ... -->


</body>

</html>