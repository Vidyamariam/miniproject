<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add Product</title>

    <link rel="stylesheet" href="/stylesheets/admin/addProduct.css" />

    <!-- Bootstrap CSS -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css"
      integrity="sha384-r4NyP46KrjDleawBgD5tp8Y7UzmLA05oM1iAEQ17CSuDqnUK2+k9luXQOfXJCJ4I"
      crossorigin="anonymous"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css"
    />

    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/2.8.0/cropper.min.css"
    />

    <style>
      #imagePreview img {
        height: 60px;
        max-width: 90px;
        margin: 15px;
      }

      /* Style for the modal */
      #imagePreview img {
        height: 60px;
        max-width: 90px;
        margin: 15px;
      }

      #cropper110Modal {
        position: absolute;
        width: 39vw;
        height: 120vh;
        background-color: rgba(53, 52, 52, 0.532);
        display: flex;
        justify-content: center;
        align-items: center;
        display: none;
        margin-top: 10px;
      }

      #cropper110Modal img {
        max-width: 100%;
      }

      .cropper110-page {
        margin: 1em auto;
        max-width: 646px;
        height: 100%;
      }

      .cropper110-box {
        padding: 0.5em;
        width: calc(100% / 2 - 1em);
        max-height: 56vh;
      }

      .cropper110-crop,
      .cropper110-close {
        padding: 0.5rem 1rem;
        background-color: rgb(0, 0, 0);
        color: #fff;
        font-weight: bold;
      }

      .cropper110-close {
        background-color: red;
      }

      .cropper110-crop {
        background-color: green;
        margin-top: 200px;
      }

      .cropper-container {
        width: 300px;
        height: 300px;
      }

      .deleteButton {
        background-color: red;
        color: white;
        border: none;
        padding: 5px 10px;
        cursor: pointer; /* Add pointer cursor on hover */
        margin-left: 5px; /* Adjust spacing between delete buttons */
      }

      .deleteButton:hover {
        background-color: darkred; /* Change background color on hover */
      }
    </style>
  </head>

  <body>
    <div class="title">
      <h2>Add Product Form</h2>
    </div>
    <div class="main">
      <form
        action="/admin/addproduct"
        method="POST"
        enctype="multipart/form-data"
      >
        <div class="mb-3">
          <label for="productName">Product Name:</label>
          <input type="text" id="productName" name="name" />
          <span id="productNameError" class="text-danger"></span>
          <br />
        </div>
        <div class="mb-3">
          <label for="Category">Category:</label>
          <select id="Category" name="category">
            <option value="" disabled selected>Select Category</option>
            <% categories.forEach((category)=> { %> <% if (category.isListed) {
            %>
            <option value="<%= category.categoryName %>">
              <%= category.categoryName %>
            </option>
            <% } %> <% }); %>
          </select>
          <span class="text-danger" id="categoryError"></span>
        </div>

        <div class="mb-3">
          <label for="fileUploader">Product Images:</label>
          <input
            type="file"
            id="fileUploader"
            data-image-preview="#imagePreview"
            name="productImage"
            accept=".jpg,.png,.jpeg,.webp"
            multiple
          />

          <div id="imagePreview"></div>
          <span id="imagesError" class="text-danger"></span>
        </div>

        <script>
          addDeleteButtons();
        </script>

        <div class="mb-3">
          <label for="description">Description:</label>
          <textarea id="description" name="description"></textarea>
          <br />
          <span id="descriptionError" class="text-danger"></span>
        </div>

        <div class="mb-3">
          <label for="price">Price:</label>
          <input type="number" id="price" name="price" />
          <br />
          <span id="priceError" class="text-danger"></span>
        </div>

        <div class="mb-3">
          <label for="discount">Discount%:</label>
          <input type="number" id="discount" name="discount" step="0.01" />

          <br />
          <span id="discountError" class="text-danger"></span>
        </div>

        <div class="mb-3">
          <label for="stock">Stock:</label>
          <input type="number" id="stock" name="stock" step="1" />

          <br />
          <span id="stockError" class="text-danger"></span>
        </div>

        <div>
          <button type="submit" class="btn btn-sm btn-success">Submit</button>
          <button
            type="button"
            onclick="cancelForm()"
            class="btn btn-sm btn-primary"
          >
            Cancel
          </button>
        </div>
      </form>

      <!-- Cropper Modal -->
      <div id="cropper110Modal">
        <div id="imageCropBox">
          <div style="text-align: end">
            <button class="cropper110-close">Close</button>
          </div>
          <section class="cropper110-page">
            <div class="cropper110-box">
              <div class="cropper110-cropping-box"></div>
            </div>
            <div>
              <button class="cropper110-crop mx-3">Crop</button>
            </div>
          </section>
        </div>
      </div>

      <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/2.8.0/cropper.min.js"></script>
      <!-- /cropper modal/ -->
    </div>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
      integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.min.js"
      integrity="sha384-oesi62hOLfzrys4LxRF63OJCXdXDipiYWBnvTl9Y9/TRlw5xlKIEHpNyvvDShgf/"
      crossorigin="anonymous"
    ></script>

    <script>
      const form = document.querySelector("form");
      form.addEventListener("submit", function (event) {
        let errors = false;

        // Product Name validation
        const productName = document.getElementById("productName").value.trim();
        const productNameError = document.getElementById("productNameError");
        if (productName === "") {
          productNameError.textContent = "Product Name is required";
          errors = true;
        } else {
          productNameError.textContent = "";
        }

        //category validation
        const category = document.getElementById("Category").value.trim();
        const categoryError = document.getElementById("categoryError");
        if (category === "") {
          categoryError.textContent = "Category is required";
          errors = true;
        } else {
          categoryError.textContent = "";
        }

        // Product Images validation (You may want to validate if any image is uploaded)
        const fileUploader = document.getElementById("fileUploader");
        const imagesError = document.getElementById("imagesError");
        if (fileUploader.files.length === 0) {
          imagesError.textContent = "Please upload at least one image";
          errors = true;
        } else {
          imagesError.textContent = "";
        }

        // Description validation
        const description = document.getElementById("description").value.trim();
        const descriptionError = document.getElementById("descriptionError");
        if (description === "") {
          descriptionError.textContent = "Description is required";
          errors = true;
        } else {
          descriptionError.textContent = "";
        }

        // Price validation
        const price = parseFloat(document.getElementById("price").value);
        const priceError = document.getElementById("priceError");
        if (isNaN(price) || price === "") {
          priceError.textContent = "Price is required";
          errors = true;
        } else if (isNaN(price) || price <= 0) {
          priceError.textContent = "Price must be a positive number";
          errors = true;
        } else {
          priceError.textContent = "";
        }

        //Discount% validation
        const discount = parseFloat(document.getElementById("discount").value);
        const discountError = document.getElementById("discountError");

        if (isNaN(discount) || discount === "") {
          discountError.textContent = "Discount percent is required";
          errors = true;
        } else if (discount < 0) {
          discountError.textContent = "Discount percent cannot be negative";
          errors = true;
        } else if (discount > 50) {
          discountError.textContent =
            "Discount percent cannot be greater than 50";
          errors = true;
        } else {
          discountError.textContent = "";
        }

        // Stock validation
        const stock = parseInt(document.getElementById("stock").value);
        const stockError = document.getElementById("stockError");
        if (isNaN(stock) || stock === "") {
          stockError.textContent = "Stock is required";
          errors = true;
        } else if (isNaN(stock) || stock < 0) {
          stockError.textContent = "Stock must be a non-negative integer";
          errors = true;
        } else {
          stockError.textContent = "";
        }

        if (errors) {
          event.preventDefault(); // Prevent form submission if there are errors
        }
      });
    </script>

    <script>
      let fileInputs = document.querySelectorAll("[data-image-preview]");
      let croppingBox = document.querySelector(".cropper110-cropping-box");
      let cropButton = document.querySelector(".cropper110-crop");
      let closeButton = document.querySelector(".cropper110-close");
      let cropper = null;
      let currentInput = null;
      let imgNames = null;

      fileInputs.forEach((fileInput) => {
        fileInput.addEventListener("change", () => {
          let previewDiv = document.querySelector(
            fileInput.dataset.imagePreview
          );
          previewDiv.innerHTML = "";
          for (let each of fileInput.files) {
            let imgSrc = URL.createObjectURL(each);
            let img = document.createElement("img");
            img.src = imgSrc;
            img.dataset.fileName = each.name;
            img.dataset.input = fileInput.id;
            img.addEventListener("click", cropImage);
            previewDiv.append(img);
          }
        });
      });

      function cropImage(e) {
        document.getElementById("cropper110Modal").style.display = "flex";
        let img = document.createElement("img");
        img.src = e.target.src;
        img.id = "image";
        croppingBox.innerHTML = "";
        croppingBox.appendChild(img);
        cropper = new Cropper(img, {
          aspectRatio: 4 / 4,
          viewMode: 1,
          autoCropArea: 1,
        });
        imgNames = e.target.dataset.fileName;
        currentInput = e.target.dataset.input;

        if (currentInput !== "fileUploader") {
          cropper.destroy();
          document.getElementById("cropper110Modal").style.display = "none";
          return;
        }
      }

      cropButton.addEventListener("click", (e) => {
        e.preventDefault();

        if (!cropper || !cropper.getCroppedCanvas()) {
          alert("Please make a selection first!");
          return;
        }
        let imgSrc = cropper
          .getCroppedCanvas({
            width: 300, // input value
          })
          .toDataURL();
        if (imgSrc && imgNames !== null) {
          let fileUploader = document.getElementById(currentInput);
          fetch(imgSrc)
            .then((res) => res.blob())
            .then((blob) => {
              let file = new File(
                [blob],
                `${imgNames}-${Date.now()}.png, { type: "image/png" }`
              ); // Fix the concatenation syntax here
              const dt = new DataTransfer();
              for (let each of fileUploader.files) {
                if (each.name !== imgNames) {
                  dt.items.add(each);
                } else {
                  dt.items.add(file);
                }
              }
              fileUploader.files = dt.files;
              let previewDiv = document.querySelector(
                fileUploader.dataset.imagePreview
              );
              previewDiv.innerHTML = "";
              let res = "";
              for (let each of fileUploader.files) {
                let src = URL.createObjectURL(each);
                res += `<img src="${src}" data-file-name="${each.name}" data-input="${fileUploader.id}" onclick="cropImage(event)" class="previewImages">`;
              }
              previewDiv.innerHTML = res;
            });
        }
        closeButton.click();
      });
      closeButton.addEventListener("click", () => {
        document.getElementById("cropper110Modal").style.display = "none";
        if (cropper) {
          cropper.destroy();
        }
      });
    </script>

    <script>
      // Function to add delete buttons for uploaded images
      function addDeleteButtons() {
        let previewDiv = document.getElementById("imagePreview");
        let previewImages = previewDiv.querySelectorAll("img");
        previewImages.forEach((image) => {
          if (
            !image.nextElementSibling ||
            !image.nextElementSibling.classList.contains("deleteButton")
          ) {
            let deleteButton = document.createElement("button");
            deleteButton.textContent = "Delete";
            deleteButton.classList.add("deleteButton");
            deleteButton.addEventListener("click", deleteImage);
            image.parentNode.insertBefore(deleteButton, image.nextSibling);
          }
        });
      }

      // Event listener for delete buttons
      function deleteImage(event) {
        let deleteButton = event.target;
        let image = deleteButton.previousElementSibling;
        let fileName = image.dataset.fileName;
        let inputId = image.dataset.input;
        let fileUploader = document.getElementById(inputId);
        let dt = new DataTransfer();
        for (let file of fileUploader.files) {
          if (file.name !== fileName) {
            dt.items.add(file);
          }
        }
        fileUploader.files = dt.files;
        let previewDiv = document.querySelector(
          fileUploader.dataset.imagePreview
        );
        previewDiv.removeChild(deleteButton); // Remove delete button
        previewDiv.removeChild(image); // Remove image
      }

      // Add event listener for file input change to add delete buttons
      document
        .getElementById("fileUploader")
        .addEventListener("change", (event) => {
          let fileInput = event.target;
          let previewDiv = document.querySelector(
            fileInput.dataset.imagePreview
          );
          previewDiv.innerHTML = "";
          for (let each of fileInput.files) {
            let imgSrc = URL.createObjectURL(each);
            let img = document.createElement("img");
            img.src = imgSrc;
            img.dataset.fileName = each.name;
            img.dataset.input = fileInput.id;
            img.addEventListener("click", cropImage);
            previewDiv.appendChild(img);
          }
          addDeleteButtons(); // Add delete buttons for uploaded images
        });

      // Add delete buttons for initially uploaded images
      addDeleteButtons();
    </script>
  </body>
</html>
